springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: com.jfcdevs.app
  pathsToMatch: /**

api:
  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfService: MY TERMS OF SERVICE
    license: MY LICENSE
    licenseUrl: MY LICENSE URL

    externalDocDesc: MY WIKI PAGE
    externalDocUrl: MY WIKI URL
    contact:
      name: NAME OF CONTACT
      url: URL TO CONTACT
      email: contact@mail.com
  responseCodes:
    ok.description: OK
    badRequest.description: Bad Request, invalid format of the request, See response for more information
    notFound.description: Not Found, the specified id does not exists
    unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail, See response message for more information

  product-composite:
    get-composite-product:
      description: Return a composite view of the specified product id
      notes: |
        If the requested product id is found the method will return information regarding:
        1. Base product  information
        1. Reviews
        1. Recommendations
        1. Service Address\n(technical information regarding the address of the micoroservices that created the response)
        
        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)
        
        ## Product id 113
        200 - ok, but no recommendations will be returned
        
        ## Product id 213
        200 - ok, but no reviews will be returned
        
        ## Non numerical product id
        400 - A **Not Request** error will be returned
        
        ## Product id 13
        404 - A **Not Found** error will be returned
        
        ## Negative product ids
        422 - An **Unprocessable Entity** error will be returned  

    create-composite-product:
      description: Creates a composite product
      notes: |
        The composite product information posted to the API will be split up and stored as separate product-info, recommendation and review in tittles
        1. If a product with the same productId as specified in the posted information already exists, an **422 - Unproccesable Entity** error with a "duplicate key" error message will be returned

    delete-composite-product:
      description: Deletes a product composite
      notes: |
        Entities for product information, recommendation and reviews related to the specified productId will be deleted. 
        The implementation of the delete method is idempotent, i.e. it can be called several times with same response.
        
        This means that a deleted request of a non-existing product will return **200 OK**.

server:
  port: 7000
server.error.include-message: always

spring.application.name: product-composite
app.eureka-server: localhost

eureka:
  client:
    serviceUrl:
      defaultZone: http://${app.eureka-server}:8761/eureka/
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5

app:
  product-service:
    host: localhost
    port: 7001
  recommendation-service:
    host: localhost
    port: 7002
  review-service:
    host: localhost
    port: 7003

spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings:
    products-out-0:
      destination: products
      producer:
        required-groups: auditGroup
    recommendations-out-0:
      destination: recommendations
      producer:
        required-groups: auditGroup
    reviews-out-0:
      destination: reviews
      producer:
        required-groups: auditGroup

spring.cloud.stream.kafka.binder:
  brokers: 127.0.0.1
  defaultBrokerPort: 9092

spring.rabbitmq:
  host: 127.0.0.1
  port: 5672
  username: guest
  password: guest

login:
  level:
    root: INFO
    com.jfcdevs.app: DEBUG
management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"
spring:
  main:
    allow-circular-references: true
---
spring.config.activate.on-profile: docker
server.port: 8080

app:
  product-service:
    host: product
    port: 8080
  recommendation-service:
    host: recommendation
    port: 8080
  review-service:
    host: review
    port: 8080

app.eureka-server: eureka
spring.rabbitmq.host: rabbitmq
spring.cloud.stream.kafka.binder.brokers: kafka
---
spring.config.activate.on-profile: streaming_partitioned
spring.cloud.stream.bindings.products-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

spring.cloud.stream.bindings.recommendations-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

spring.cloud.stream.bindings.reviews-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

---
spring.config.activate.on-profile: kafka

management.health.rabbit.enabled: false
spring.cloud.stream.defaultBinder: kafka
spring.kafka.bootstrap-servers: kafka:9092
spring.cloud.stream.kafka.binder.replication-factor: 1